{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar API_URL = 'http://graphql.unicaen.fr:4000';\nvar UPDATE_TODO = `\nmutation Mutation($where: TodoWhere, $update: TodoUpdateInput) {\n    updateTodos(where: $where, update: $update) {\n      todos {\n        done\n      }\n    }\n  }`;\nexport function updateTodo(_x, _x2, _x3, _x4) {\n  return _updateTodo.apply(this, arguments);\n}\nfunction _updateTodo() {\n  _updateTodo = _asyncToGenerator(function* (id, listID, state, token) {\n    try {\n      var response = yield fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify({\n          query: UPDATE_TODO,\n          variables: {\n            where: {\n              belongsTo: {\n                id: listID\n              },\n              id: id\n            },\n            update: {\n              done: state\n            }\n          }\n        })\n      });\n      var jsonResponse = yield response.json();\n      if (jsonResponse.errors != null) {\n        throw jsonResponse.errors[0];\n      }\n      return jsonResponse.data.updateTodos;\n    } catch (error) {\n      throw error;\n    }\n  });\n  return _updateTodo.apply(this, arguments);\n}","map":{"version":3,"names":["API_URL","UPDATE_TODO","updateTodo","_x","_x2","_x3","_x4","_updateTodo","apply","arguments","_asyncToGenerator","id","listID","state","token","response","fetch","method","headers","body","JSON","stringify","query","variables","where","belongsTo","update","done","jsonResponse","json","errors","data","updateTodos","error"],"sources":["/home/kabar231/Documents/Kabar-Mansous/reactProject/Helpers/updateTodoItem.js"],"sourcesContent":["//mutation to update the todo item\nconst API_URL = 'http://graphql.unicaen.fr:4000'\nconst UPDATE_TODO = `\nmutation Mutation($where: TodoWhere, $update: TodoUpdateInput) {\n    updateTodos(where: $where, update: $update) {\n      todos {\n        done\n      }\n    }\n  }`\n\n\n\nexport async function updateTodo(id,listID,state,token) {\n    \n    try {\n        const response = await fetch(API_URL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization' : 'Bearer ' + token\n            },\n            body: JSON.stringify({\n                query:UPDATE_TODO ,\n                variables: {\n                    where: {\n                    belongsTo: {\n                      id: listID\n                    },\n                    id: id\n                  },\n                  update: {\n                    done: state\n                  }\n                } \n            })\n        })\n        const jsonResponse = await response.json()\n        if (jsonResponse.errors != null) {\n            throw jsonResponse.errors[0]\n        }\n        return jsonResponse.data.updateTodos\n    } catch (error) {\n        throw error\n    }\n  }"],"mappings":";AACA,IAAMA,OAAO,GAAG,gCAAgC;AAChD,IAAMC,WAAW,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AAIJ,gBAAsBC,UAAUA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAgC7B,SAAAF,YAAA;EAAAA,WAAA,GAAAG,iBAAA,CAhCI,WAA0BC,EAAE,EAACC,MAAM,EAACC,KAAK,EAACC,KAAK,EAAE;IAEpD,IAAI;MACA,IAAMC,QAAQ,SAASC,KAAK,CAAChB,OAAO,EAAE;QAClCiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,SAAS,GAAGJ;QAClC,CAAC;QACDK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,KAAK,EAACrB,WAAW;UACjBsB,SAAS,EAAE;YACPC,KAAK,EAAE;cACPC,SAAS,EAAE;gBACTd,EAAE,EAAEC;cACN,CAAC;cACDD,EAAE,EAAEA;YACN,CAAC;YACDe,MAAM,EAAE;cACNC,IAAI,EAAEd;YACR;UACF;QACJ,CAAC;MACL,CAAC,CAAC;MACF,IAAMe,YAAY,SAASb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAC1C,IAAID,YAAY,CAACE,MAAM,IAAI,IAAI,EAAE;QAC7B,MAAMF,YAAY,CAACE,MAAM,CAAC,CAAC,CAAC;MAChC;MACA,OAAOF,YAAY,CAACG,IAAI,CAACC,WAAW;IACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACF,CAAC;EAAA,OAAA1B,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}