{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { TokenContext } from \"../Context/Context\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport NavigationTodo from \"./NavigationTodo\";\nimport HomeScreen from \"../Screen/HomeScreen\";\nimport SignInScreen from \"../Screen/SignInScreen\";\nimport SignOutScreen from \"../Screen/SignOutScreen\";\nimport SignUpScreen from \"../Screen/SignUpScreen\";\nimport pageStyle from \"../Style/PagesStyle\";\nimport colors from \"../Style/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\nexport default function Navigation() {\n  return _jsx(TokenContext.Consumer, {\n    children: function children(_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        token = _ref2[0],\n        setToken = _ref2[1];\n      return _jsx(NavigationContainer, {\n        children: token != null ? _jsxs(Tab.Navigator, {\n          screenOptions: {\n            tabBarShowLabel: false,\n            tabBarStyle: _objectSpread({\n              position: \"absolute\",\n              bottom: 25,\n              left: 20,\n              right: 20,\n              elevation: 0,\n              backgroundColor: colors.menu,\n              borderRadius: 15,\n              height: 90\n            }, pageStyle.shadow)\n          },\n          children: [_jsx(Tab.Screen, {\n            name: \"Home\",\n            component: HomeScreen,\n            options: {\n              headerTintColor: colors.headerText,\n              headerTitleStyle: {\n                fontWeight: \"bold\"\n              },\n              headerStyle: {\n                backgroundColor: colors.menu\n              },\n              tabBarIcon: function tabBarIcon(_ref3) {\n                var focused = _ref3.focused;\n                return _jsxs(View, {\n                  style: {\n                    alignItems: \"center\",\n                    justifyContent: \"center\"\n                  },\n                  children: [_jsx(Image, {\n                    source: require(\"../assets/home.png\"),\n                    resizeMode: \"contain\",\n                    style: {\n                      width: 25,\n                      height: 25,\n                      tintColor: focused ? colors.selectedIcon : colors.unselectedIcon\n                    }\n                  }), _jsx(Text, {\n                    style: {\n                      color: focused ? colors.selectedIcon : colors.unselectedIcon,\n                      fontSize: 12\n                    },\n                    children: \"Home\"\n                  })]\n                });\n              }\n            }\n          }), _jsx(Tab.Screen, {\n            name: \"TodoLists\",\n            component: NavigationTodo,\n            options: {\n              headerTintColor: colors.headerText,\n              headerTitleStyle: {\n                fontWeight: \"bold\"\n              },\n              headerStyle: {\n                backgroundColor: colors.menu\n              },\n              tabBarIcon: function tabBarIcon(_ref4) {\n                var focused = _ref4.focused;\n                return _jsxs(View, {\n                  style: {\n                    alignItems: \"center\",\n                    justifyContent: \"center\"\n                  },\n                  children: [_jsx(Image, {\n                    source: require(\"../assets/to-do-list.png\"),\n                    resizeMode: \"contain\",\n                    style: {\n                      width: 25,\n                      height: 25,\n                      tintColor: focused ? colors.selectedIcon : colors.unselectedIcon\n                    }\n                  }), _jsx(Text, {\n                    style: {\n                      color: focused ? colors.selectedIcon : colors.unselectedIcon,\n                      fontSize: 12\n                    },\n                    children: \"TodoLists\"\n                  })]\n                });\n              }\n            }\n          }), _jsx(Tab.Screen, {\n            name: \"SignOut\",\n            component: SignOutScreen,\n            options: {\n              headerTintColor: colors.headerText,\n              headerTitleStyle: {\n                fontWeight: \"bold\"\n              },\n              headerStyle: {\n                backgroundColor: colors.menu\n              },\n              tabBarIcon: function tabBarIcon(_ref5) {\n                var focused = _ref5.focused;\n                return _jsxs(View, {\n                  style: {\n                    alignItems: \"center\",\n                    justifyContent: \"center\"\n                  },\n                  children: [_jsx(Image, {\n                    source: require(\"../assets/logout.png\"),\n                    resizeMode: \"contain\",\n                    style: {\n                      width: 25,\n                      height: 25,\n                      tintColor: focused ? colors.selectedIcon : colors.unselectedIcon\n                    }\n                  }), _jsx(Text, {\n                    style: {\n                      color: focused ? colors.selectedIcon : colors.unselectedIcon,\n                      fontSize: 12\n                    },\n                    children: \"SignOut\"\n                  })]\n                });\n              }\n            }\n          })]\n        }) : ({}, _jsxs(Tab.Navigator, {\n          screenOptions: {\n            tabBarShowLabel: false,\n            tabBarStyle: _objectSpread({\n              position: \"absolute\",\n              bottom: 25,\n              left: 20,\n              right: 20,\n              elevation: 0,\n              backgroundColor: colors.menu,\n              borderRadius: 15,\n              height: 90\n            }, pageStyle.shadow)\n          },\n          children: [_jsx(Tab.Screen, {\n            name: \"SignIn\",\n            component: SignInScreen,\n            options: {\n              headerTintColor: colors.headerText,\n              headerTitleStyle: {\n                fontWeight: \"bold\"\n              },\n              headerStyle: {\n                backgroundColor: colors.menu\n              },\n              tabBarIcon: function tabBarIcon(_ref6) {\n                var focused = _ref6.focused;\n                return _jsxs(View, {\n                  style: {\n                    alignItems: \"center\",\n                    justifyContent: \"center\"\n                  },\n                  children: [_jsx(Image, {\n                    source: require(\"../assets/SignIn.png\"),\n                    resizeMode: \"contain\",\n                    style: {\n                      width: 25,\n                      height: 25,\n                      tintColor: focused ? colors.selectedIcon : colors.unselectedIcon\n                    }\n                  }), _jsx(Text, {\n                    style: {\n                      color: focused ? colors.selectedIcon : colors.unselectedIcon,\n                      fontSize: 12\n                    },\n                    children: \"SignIn\"\n                  })]\n                });\n              }\n            }\n          }), _jsx(Tab.Screen, {\n            name: \"SignUp\",\n            component: SignUpScreen,\n            options: {\n              headerTintColor: colors.headerText,\n              headerTitleStyle: {\n                fontWeight: \"bold\"\n              },\n              headerStyle: {\n                backgroundColor: colors.menu\n              },\n              tabBarIcon: function tabBarIcon(_ref7) {\n                var focused = _ref7.focused;\n                return _jsxs(View, {\n                  style: {\n                    alignItems: \"center\",\n                    justifyContent: \"center\"\n                  },\n                  children: [_jsx(Image, {\n                    source: require(\"../assets/SignUp.png\"),\n                    resizeMode: \"contain\",\n                    style: {\n                      width: 25,\n                      height: 25,\n                      tintColor: focused ? colors.selectedIcon : colors.unselectedIcon\n                    }\n                  }), _jsx(Text, {\n                    style: {\n                      color: focused ? colors.selectedIcon : colors.unselectedIcon,\n                      fontSize: 12\n                    },\n                    children: \"SignUp\"\n                  })]\n                });\n              }\n            }\n          })]\n        }))\n      });\n    }\n  });\n}","map":{"version":3,"names":["React","NavigationContainer","createBottomTabNavigator","TokenContext","View","Image","Text","NavigationTodo","HomeScreen","SignInScreen","SignOutScreen","SignUpScreen","pageStyle","colors","jsx","_jsx","jsxs","_jsxs","Tab","Navigation","Consumer","children","_ref","_ref2","_slicedToArray","token","setToken","Navigator","screenOptions","tabBarShowLabel","tabBarStyle","_objectSpread","position","bottom","left","right","elevation","backgroundColor","menu","borderRadius","height","shadow","Screen","name","component","options","headerTintColor","headerText","headerTitleStyle","fontWeight","headerStyle","tabBarIcon","_ref3","focused","style","alignItems","justifyContent","source","require","resizeMode","width","tintColor","selectedIcon","unselectedIcon","color","fontSize","_ref4","_ref5","_ref6","_ref7"],"sources":["/home/kabar231/Documents/Kabar-Mansous/reactProject/Navigation/Navigation.js"],"sourcesContent":["import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { TokenContext } from \"../Context/Context\";\nimport { View, Image, Text } from \"react-native-web\";\nimport NavigationTodo from \"./NavigationTodo\";\nimport HomeScreen from \"../Screen/HomeScreen\";\nimport SignInScreen from \"../Screen/SignInScreen\";\nimport SignOutScreen from \"../Screen/SignOutScreen\";\nimport SignUpScreen from \"../Screen/SignUpScreen\";\nimport pageStyle from \"../Style/PagesStyle\";\nimport colors from \"../Style/Colors\";\n// setting the tab\nconst Tab = createBottomTabNavigator();\n//function that defines the navigation\nexport default function Navigation() {\n  return (\n    <TokenContext.Consumer>\n      {([token, setToken]) => (\n        <NavigationContainer>\n          {/* if token is null then sign in/up screens */}\n          {token != null ? (\n            <Tab.Navigator\n              screenOptions={{\n                tabBarShowLabel: false,\n                tabBarStyle: {\n                  position: \"absolute\",\n                  bottom: 25,\n                  left: 20,\n                  right: 20,\n                  elevation: 0,\n                  backgroundColor: colors.menu,\n                  borderRadius: 15,\n                  height: 90,\n                  ...pageStyle.shadow,\n                },\n              }}\n            >\n              <Tab.Screen\n                name=\"Home\"\n                component={HomeScreen}\n                options={\n                  {\n                    headerTintColor: colors.headerText,\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                    headerStyle: { backgroundColor: colors.menu },\n                    tabBarIcon: ({ focused }) => (\n                      <View\n                        style={{\n                          alignItems: \"center\",\n                          justifyContent: \"center\",\n                        }}\n                      >\n                        <Image\n                          source={require(\"../assets/home.png\")}\n                          resizeMode=\"contain\"\n                          style={{\n                            width: 25,\n                            height: 25,\n                            tintColor: focused\n                              ? colors.selectedIcon\n                              : colors.unselectedIcon,\n                          }}\n                        />\n                        <Text\n                          style={{\n                            color: focused\n                              ? colors.selectedIcon\n                              : colors.unselectedIcon,\n                            fontSize: 12,\n                          }}\n                        >\n                          Home\n                        </Text>\n                      </View>\n                    ),\n                  }\n                }\n              />\n\n              <Tab.Screen\n                name=\"TodoLists\"\n                component={NavigationTodo}\n                options={{\n                  headerTintColor: colors.headerText,\n                  headerTitleStyle: {\n                    fontWeight: \"bold\",\n                  },\n                  headerStyle: { backgroundColor: colors.menu },\n                  tabBarIcon: ({ focused }) => (\n                    <View\n                      style={{ alignItems: \"center\", justifyContent: \"center\" }}\n                    >\n                      <Image\n                        source={require(\"../assets/to-do-list.png\")}\n                        resizeMode=\"contain\"\n                        style={{\n                          width: 25,\n                          height: 25,\n                          tintColor: focused\n                            ? colors.selectedIcon\n                            : colors.unselectedIcon,\n                        }}\n                      />\n                      <Text\n                        style={{\n                          color: focused\n                            ? colors.selectedIcon\n                            : colors.unselectedIcon,\n                          fontSize: 12,\n                        }}\n                      >\n                        TodoLists\n                      </Text>\n                    </View>\n                  ),\n                }}\n              />\n              <Tab.Screen\n                name=\"SignOut\"\n                component={SignOutScreen}\n                options={{\n                  headerTintColor: colors.headerText,\n                  headerTitleStyle: {\n                    fontWeight: \"bold\",\n                  },\n                  headerStyle: { backgroundColor: colors.menu },\n                  tabBarIcon: ({ focused }) => (\n                    <View\n                      style={{ alignItems: \"center\", justifyContent: \"center\" }}\n                    >\n                      <Image\n                        source={require(\"../assets/logout.png\")}\n                        resizeMode=\"contain\"\n                        style={{\n                          width: 25,\n                          height: 25,\n                          tintColor: focused\n                            ? colors.selectedIcon\n                            : colors.unselectedIcon,\n                        }}\n                      />\n                      <Text\n                        style={{\n                          color: focused\n                            ? colors.selectedIcon\n                            : colors.unselectedIcon,\n                          fontSize: 12,\n                        }}\n                      >\n                        SignOut\n                      </Text>\n                    </View>\n                  ),\n                }}\n              />\n            </Tab.Navigator>\n          ) : (\n            {/* if token is set then home/todolists/sign out screen*/},\n            <Tab.Navigator\n              screenOptions={{\n                tabBarShowLabel: false,\n                tabBarStyle: {\n                  position: \"absolute\",\n                  bottom: 25,\n                  left: 20,\n                  right: 20,\n                  elevation: 0,\n                  backgroundColor: colors.menu,\n                  borderRadius: 15,\n                  height: 90,\n                  ...pageStyle.shadow,\n                },\n              }}\n            >\n              <Tab.Screen\n                name=\"SignIn\"\n                component={SignInScreen}\n                options={{\n                  headerTintColor: colors.headerText,\n                  headerTitleStyle: {\n                    fontWeight: \"bold\",\n                  },\n                  headerStyle: { backgroundColor: colors.menu },\n                  tabBarIcon: ({ focused }) => (\n                    <View\n                      style={{ alignItems: \"center\", justifyContent: \"center\" }}\n                    >\n                      <Image\n                        source={require(\"../assets/SignIn.png\")}\n                        resizeMode=\"contain\"\n                        style={{\n                          width: 25,\n                          height: 25,\n                          tintColor: focused\n                            ? colors.selectedIcon\n                            : colors.unselectedIcon,\n                        }}\n                      />\n                      <Text\n                        style={{\n                          color: focused\n                            ? colors.selectedIcon\n                            : colors.unselectedIcon,\n                          fontSize: 12,\n                        }}\n                      >\n                        SignIn\n                      </Text>\n                    </View>\n                  ),\n                }}\n              />\n              <Tab.Screen\n                name=\"SignUp\"\n                component={SignUpScreen}\n                options={{\n                  headerTintColor: colors.headerText,\n                  headerTitleStyle: {\n                    fontWeight: \"bold\",\n                  },\n                  headerStyle: { backgroundColor: colors.menu },\n                  tabBarIcon: ({ focused }) => (\n                    <View\n                      style={{ alignItems: \"center\", justifyContent: \"center\" }}\n                    >\n                      <Image\n                        source={require(\"../assets/SignUp.png\")}\n                        resizeMode=\"contain\"\n                        style={{\n                          width: 25,\n                          height: 25,\n                          tintColor: focused\n                            ? colors.selectedIcon\n                            : colors.unselectedIcon,\n                        }}\n                      />\n                      <Text\n                        style={{\n                          color: focused\n                            ? colors.selectedIcon\n                            : colors.unselectedIcon,\n                          fontSize: 12,\n                        }}\n                      >\n                        SignUp\n                      </Text>\n                    </View>\n                  ),\n                }}\n              />\n            </Tab.Navigator>\n          )}\n        </NavigationContainer>\n      )}\n    </TokenContext.Consumer>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}